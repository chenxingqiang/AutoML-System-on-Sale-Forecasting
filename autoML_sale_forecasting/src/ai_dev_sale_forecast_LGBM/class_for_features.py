# -*-coding:utf-8-*-import gcimport numpy as npimport pandas as pdfrom datetime import timedeltafrom sklearn.preprocessing import LabelEncoderclass Make_time_features(object):    """    """    def __init__(self, sudoer, df_train_pre, items_info):        """        initialize  of the  class        :param sudoer: father nodes         :param df_train_pre: the dataset of train and pre        :param items_info: goods info        """        df_train_pre['date'] = pd.to_datetime(df_train_pre['date'])        ## 对销量值进行转换        df_train_pre['sale_qty'] = df_train_pre['sale_qty'].map(lambda x: np.log1p(            float(x)) if float(x) > 0 else 0)        df_train_pre['on_promotion'] = df_train_pre['discount_degree'].map(lambda x: 1 if x > 0 else 0).astype(            bool)        self.df_train_pre = df_train_pre        self.TODAY_DATE = sudoer.TODAY_DATE        self.TRAIN_DATE = sudoer.TRAIN_DATE        self.PRE_DATE = sudoer.PRE_DATE        self.VAL_DATE = sudoer.VAL_DATE        self.PREDICTION_DAY = sudoer.PREDICTION_DAY        self.PRE_DAYS = sudoer.PRE_DAYS        self.DATA_START_DAY = sudoer.DATA_START_DAY        self.num_days = sudoer.num_days        self.items_info = items_info    def chart_data(self):        """        :param self        :return: dataset for train and predict        """        df_train_test = self.df_train_pre        df_train = df_train_test[df_train_test.date < self.TODAY_DATE]  # validate_date        df_test_temp = df_train_test[df_train_test.date >= self.TODAY_DATE]  ## validate_date        df_test_temp = df_test_temp[df_test_temp.date <= self.PREDICTION_DAY]  ## validate_date+3 = pre_date        df_test = df_test_temp.drop(['sale_qty'], axis=1).dropna().drop_duplicates().reset_index()        df_test['id'] = df_test['index']        df_test = df_test.drop('index', axis=1)        df_test = df_test.set_index(['storeid', 'goodsid', 'date'])        df_test = df_test.drop_duplicates()        df_time = df_train.loc[df_train.date >= self.DATA_START_DAY]  ##获取数据的起点：start_date        ## 商品信息        items_info = self.items_info.set_index('goodsid')        le = LabelEncoder()        ##门店特征的汇总        stores = pd.DataFrame()        stores['storeid'] = ['A035', 'A206']        stores['city'] = ['Beijing', 'Beijing']        stores['state'] = ['open', 'open']        stores['type'] = ['Middle', 'small']        stores = stores.set_index("storeid")        stores['city'] = le.fit_transform(stores['city'].values)        stores['state'] = le.fit_transform(stores['state'].values)        stores['type'] = le.fit_transform(stores['type'].values)        promo_time = self.make_time_series(df_time, df_test, ["storeid", "goodsid", "date"], "on_promotion")        price_time = self.make_time_series(df_time, df_test, ["storeid", "goodsid", "date"], "price")        discount_time = self.make_time_series(df_time, df_test, ["storeid", "goodsid", "date"],                                              "discount_degree")        df_time = df_time.set_index(            ["storeid", "goodsid", "date"])[["sale_qty"]].unstack(            level=-1).fillna(0)        df_time.columns = df_time.columns.get_level_values(1)        items_info = items_info.reindex(df_time.index.get_level_values(1))        items_info["perishable"] = items_info["keepdays"].map(lambda x: 1 if x < 3 else 0)        stores = stores.reindex(df_time.index.get_level_values(0))        df_time_item = df_time.groupby('goodsid')[df_time.columns].sum()        promo_time_item = promo_time.groupby('goodsid')[promo_time.columns].sum()        price_time_item = price_time.groupby('goodsid')[price_time.columns].sum()        discount_time_item = discount_time.groupby('goodsid')[discount_time.columns].sum()        df_time_store_class = df_time.reset_index()        df_time_store_class['keepdays'] = items_info['keepdays'].values        df_time_store_class_index = df_time_store_class[['keepdays', 'storeid']]        df_time_store_class = df_time_store_class.groupby(['keepdays', 'storeid'])[df_time.columns].sum()        df_time_promo_store_class = promo_time.reset_index()        df_time_promo_store_class['keepdays'] = items_info['keepdays'].values        df_time_promo_store_class_index = df_time_promo_store_class[['keepdays', 'storeid']]        df_time_promo_store_class = df_time_promo_store_class.groupby(['keepdays', 'storeid'])[            promo_time.columns].sum()        ##TODO 统计每天订单量        print("Preparing dataset...")        ttime = self.TRAIN_DATE        X_l, y_l = [], []        for i in range(self.num_days):            delta = timedelta(days=7 * i)            X_tmp, y_tmp = self.prepare_dataset(df_time, 'promotion_x', promo_time, ttime + delta,                                                name_prefix='sales_quantity')            X_tmp2 = self.prepare_dataset(df_time_item, 'promotion', promo_time_item, ttime + delta,                                          is_train=False,                                          name_prefix='promo_item')            X_tmp2.index = df_time_item.index            X_tmp2 = X_tmp2.reindex(df_time.index.get_level_values(1)).reset_index(drop=True)            X_tmp3 = self.prepare_dataset(df_time_item, 'price', price_time_item, ttime + delta, is_train=False,                                          name_prefix='price_item')            X_tmp3.index = df_time_item.index            X_tmp3 = X_tmp3.reindex(df_time.index.get_level_values(1)).reset_index(drop=True)            X_tmp4 = self.prepare_dataset(df_time_item, 'discount', discount_time_item, ttime + delta,                                          is_train=False,                                          name_prefix='discount_item')            X_tmp4.index = df_time_item.index            X_tmp4 = X_tmp4.reindex(df_time.index.get_level_values(1)).reset_index(drop=True)            X_tmp5 = self.prepare_dataset(df_time_store_class, 'keepdays_store_class', df_time_promo_store_class,                                          ttime + delta,                                          is_train=False, name_prefix='store_class')            X_tmp5.index = df_time_store_class.index            X_tmp5 = X_tmp5.reindex(df_time_store_class_index).reset_index(drop=True)            X_tmp = pd.concat(                [X_tmp, X_tmp2, X_tmp3, X_tmp4, X_tmp5, items_info.reset_index(), stores.reset_index()],                axis=1)            X_tmp_con = X_tmp            X_l.append(X_tmp_con)            y_l.append(y_tmp)            del X_tmp2, X_tmp3, X_tmp4, X_tmp5            gc.collect()        X_train = pd.concat(X_l, axis=0)        y_train = np.concatenate(y_l, axis=0)        del X_l, y_l        X_val, y_val = self.prepare_dataset(df_time, 'promotion_x', promo_time, self.VAL_DATE)        X_val2 = self.prepare_dataset(df_time_item, 'promotion', promo_time_item, self.VAL_DATE, is_train=False,                                      name_prefix='promo_item')        X_val2.index = df_time_item.index        X_val2 = X_val2.reindex(df_time.index.get_level_values(1)).reset_index(drop=True)        X_val3 = self.prepare_dataset(df_time_item, 'price', price_time_item, self.VAL_DATE, is_train=False,                                      name_prefix='price_item')        X_val3.index = df_time_item.index        X_val3 = X_val3.reindex(df_time.index.get_level_values(1)).reset_index(drop=True)        X_val4 = self.prepare_dataset(df_time_item, 'discount', discount_time_item, self.VAL_DATE, is_train=False,                                      name_prefix='discount_item')        X_val4.index = df_time_item.index        X_val4 = X_val4.reindex(df_time.index.get_level_values(1)).reset_index(drop=True)        X_val5 = self.prepare_dataset(df_time_store_class, 'keepdays_store_class', df_time_promo_store_class,                                      self.VAL_DATE,                                      is_train=False, name_prefix='store_class')        X_val5.index = df_time_store_class.index        X_val5 = X_val5.reindex(df_time_store_class_index).reset_index(drop=True)        X_val_tmp = pd.concat(            [X_val, X_val2, X_val3, X_val4, X_val5, items_info.reset_index(), stores.reset_index()],            axis=1)        X_val = X_val_tmp        X_test = self.prepare_dataset(df_time, 'promotion_x', promo_time, self.PRE_DATE, is_train=False)        X_test2 = self.prepare_dataset(df_time_item, 'promotion', promo_time_item, self.PRE_DATE, is_train=False,                                       name_prefix='promo_item')        X_test2.index = df_time_item.index        X_test2 = X_test2.reindex(df_time.index.get_level_values(1)).reset_index(drop=True)        X_test3 = self.prepare_dataset(df_time_item, 'price', price_time_item, self.PRE_DATE, is_train=False,                                       name_prefix='price_item')        X_test3.index = df_time_item.index        X_test3 = X_test3.reindex(df_time.index.get_level_values(1)).reset_index(drop=True)        X_test4 = self.prepare_dataset(df_time_item, 'discount', discount_time_item, self.PRE_DATE,                                       is_train=False,                                       name_prefix='discount_item')        X_test4.index = df_time_item.index        X_test4 = X_test4.reindex(df_time.index.get_level_values(1)).reset_index(drop=True)        X_test5 = self.prepare_dataset(df_time_store_class, 'keepdays_store_class', df_time_promo_store_class,                                       self.PRE_DATE,                                       is_train=False, name_prefix='store_class')        X_test5.index = df_time_store_class.index        X_test5 = X_test5.reindex(df_time_store_class_index).reset_index(drop=True)        X_test_tmp = pd.concat(            [X_test, X_test2, X_test3, X_test4, X_test5, items_info.reset_index(), stores.reset_index()],            axis=1)        X_test = X_test_tmp        del X_test2, X_test3, X_test4, X_test5, X_val2, df_time_promo_store_class, df_time_store_class_index        del X_val3, X_val4, X_val5, df_time_item, promo_time_item, df_time_store_class        gc.collect()        datasets = {"X_train": X_train,                    "y_train": y_train,                    "X_test": X_test,                    "X_val": X_val,                    "y_val": y_val,                    "df_time": df_time,                    "df_test": df_test                    }        return datasets    def make_time_series(self, data_df, data_test, index_name, feature_name):        """        输入：特征集合:data_df，DataFrame;测试部分的特征：data_test，DataFrame             索引名称：list type；特征名称：字符串        输出：时间序列化后的特征，DataFrame        """        temp_train = data_df.set_index(index_name)[[feature_name]].unstack(            level=-1).fillna(0.0)        temp_train.columns = temp_train.columns.get_level_values(1)        temp_test = data_test[[feature_name]].unstack(level=-1).fillna(0.0)        temp_test.columns = temp_test.columns.get_level_values(1)        temp_test = temp_test.reindex(temp_train.index).fillna(0.0)        temp = pd.concat([temp_train, temp_test], axis=1)        del temp_test, temp_train        return temp    def get_timespan(self, df, dt, minus, periods, freq='D'):        return df[pd.date_range(dt - timedelta(days=minus), periods=periods, freq=freq)]    def prepare_dataset(self, df, target_name, target_df, ttime, is_train=True, name_prefix=None):        X = {            target_name + "_20_time": self.get_timespan(target_df, ttime, 20, 20).sum(axis=1).values,            target_name + "_30_time": self.get_timespan(target_df, ttime, 30, 30).sum(axis=1).values,            target_name + "_60_time": self.get_timespan(target_df, ttime, 60, 60).sum(axis=1).values,            target_name + "_3_time_aft": self.get_timespan(target_df, ttime + timedelta(days=self.PRE_DAYS),                                                           self.PRE_DAYS - 1,                                                           self.PRE_DAYS).sum(axis=1).values,            target_name + "_2_time_aft": self.get_timespan(target_df, ttime + timedelta(days=self.PRE_DAYS),                                                           self.PRE_DAYS - 1,                                                           self.PRE_DAYS % 2 + round(self.PRE_DAYS / 2) - 1).sum(                axis=1).values,            target_name + "_1_time_aft": self.get_timespan(target_df, ttime + timedelta(days=self.PRE_DAYS),                                                           self.PRE_DAYS - 1,                                                           self.PRE_DAYS - 2).sum(axis=1).values,        }        # print(X)        for i in [1, 2, 3, 5, 7, 14, 20, 30, 60]:            tmp1 = self.get_timespan(df, ttime, i, i)            tmp2 = (self.get_timespan(target_df, ttime, i, i) > 0) * 1            X['has_' + target_name + '_mean_%s' % i] = (tmp1 * tmp2.replace(0, np.nan)).mean(axis=1).values            X['has_' + target_name + '_mean_%s_decay' % i] = (                    tmp1 * tmp2.replace(0, np.nan) * np.power(0.9, np.arange(i)[::-1])).sum(                axis=1).values            X['no_' + target_name + '_mean_%s' % i] = (tmp1 * (1 - tmp2).replace(0, np.nan)).mean(                axis=1).values            X['no_' + target_name + '_mean_%s_decay' % i] = (                    tmp1 * (1 - tmp2).replace(0, np.nan) * np.power(0.9, np.arange(i)[::-1])).sum(                axis=1).values        for i in [1, 2, 3, 5, 7, 14, 20, 30, 60]:            tmp = self.get_timespan(df, ttime, i, i)            X['diff_%s_mean' % i] = tmp.diff(axis=1).mean(axis=1).values            X['mean_%s_decay' % i] = (tmp * np.power(0.9, np.arange(i)[::-1])).sum(axis=1).values            X['mean_%s' % i] = tmp.mean(axis=1).values            X['median_%s' % i] = tmp.median(axis=1).values            X['min_%s' % i] = tmp.min(axis=1).values            X['max_%s' % i] = tmp.max(axis=1).values            X['std_%s' % i] = tmp.std(axis=1).values        for i in [1, 2, 3, 5, 7, 14, 20, 30, 60]:            tmp = self.get_timespan(df, ttime + timedelta(days=-7), i, i)            X['diff_%s_mean_2' % i] = tmp.diff(axis=1).mean(axis=1).values            X['mean_%s_decay_2' % i] = (tmp * np.power(0.9, np.arange(i)[::-1])).sum(axis=1).values            X['mean_%s_2' % i] = tmp.mean(axis=1).values            X['median_%s_2' % i] = tmp.median(axis=1).values            X['min_%s_2' % i] = tmp.min(axis=1).values            X['max_%s_2' % i] = tmp.max(axis=1).values            X['std_%s_2' % i] = tmp.std(axis=1).values        for i in [1, 2, 3, 4, 5, 7, 14, 20, 30, 60]:            tmp = self.get_timespan(df, ttime, i, i)            X['has_sales_days_in_last_%s' % i] = (tmp > 0).sum(axis=1).values            X['last_has_sales_day_in_last_%s' % i] = i - ((tmp > 0) * np.arange(i)).max(axis=1).values            X['first_has_sales_day_in_last_%s' % i] = ((tmp > 0) * np.arange(i, 0, -1)).max(axis=1).values            tmp = self.get_timespan(target_df, ttime, i, i)            X['has_' + target_name + '_days_in_last_%s' % i] = (tmp > 0).sum(axis=1).values            X['last_has_' + target_name + '_day_in_last_%s' % i] = i - ((tmp > 0) * np.arange(i)).max(                axis=1).values            X['first_has_' + target_name + '_day_in_last_%s' % i] = ((tmp > 0) * np.arange(i, 0, -1)).max(                axis=1).values            tmp = self.get_timespan(target_df, ttime + timedelta(days=self.PRE_DAYS), self.PRE_DAYS - 1,                                    self.PRE_DAYS - 1)            X['has_' + target_name + '_days_in_after_2_days'] = (tmp > 0).sum(axis=1).values            X['last_has_' + target_name + '_day_in_after_2_days'] = i - ((tmp > 0) * np.arange(self.PRE_DAYS - 1)).max(                axis=1).values            X['first_has_' + target_name + '_day_in_after_2_days'] = (                    (tmp > 0) * np.arange(self.PRE_DAYS - 1, 0, -1)).max(axis=1).values        for i in range(1, self.PRE_DAYS):            X['day_%s_time' % i] = self.get_timespan(df, ttime, i, 1).values.ravel()        for i in range(7):            X['mean_4_dow{}_time'.format(i)] = self.get_timespan(df, ttime, 28 - i, 4, freq='7D').mean(                axis=1).values            X['mean_20_dow{}_time'.format(i)] = self.get_timespan(df, ttime, 70 - i, 10, freq='7D').mean(                axis=1).values        for i in range(-self.PRE_DAYS, self.PRE_DAYS):            X["promo_{}".format(i)] = target_df[ttime + timedelta(days=i)].values.astype(np.uint8)        X = pd.DataFrame(X)        if is_train:            y = df[                pd.date_range(ttime, periods=self.PRE_DAYS)            ].values            return X, y        if name_prefix is not None:            X.columns = ['%s_%s' % (name_prefix, c) for c in X.columns]        return X