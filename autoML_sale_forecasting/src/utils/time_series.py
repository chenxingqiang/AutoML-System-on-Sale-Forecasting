import pandas as pddef condition_time_series(condition, before_Times, feature_name):    """    :param condition:    :param before_Times:    :param feature_name:    :return:    """    # before_Times = 3    Times = sorted(list(set(condition.Time)), reverse=True)    con_all_day = condition[['Car_ID', 'Time', feature_name]].drop_duplicates()    df_test = con_all_day.pivot_table(index=['Car_ID'], columns=['Time'], values=[feature_name])    con_day_n = df_test[feature_name].sort_index(axis=1, ascending=False).reset_index()    Before_con_cols = ['before_' + feature_name + '_' + str(i).zfill(2) for i in range(before_Times)]    before_0 = con_day_n[con_day_n.columns[-before_Times:]]    before_0.columns = Before_con_cols[0:before_Times]    before_title = con_day_n['Car_ID']    before_end_0 = pd.concat([before_title, before_0], axis=1)    before_end_0.insert(1, 'Time', con_day_n.columns[-(before_Times + 1)])    before_1 = con_day_n[con_day_n.columns[-(before_Times + 1):-1]]    before_1.columns = Before_con_cols[0:before_Times]    before_title = con_day_n['Car_ID']    before_end_1 = pd.concat([before_title, before_1], axis=1)    before_end_1.insert(1, 'Time', con_day_n.columns[-(before_Times + 2)])    before_data = pd.concat([before_end_0, before_end_1], axis=0)    for i in range(0, len(Times[1:-(before_Times + 2)]) + 1):        before = con_day_n[con_day_n.columns[-(before_Times + 2) - i:-2 - i]]        before.columns = Before_con_cols[0:before_Times]        before_title = con_day_n['Car_ID']        before_end = pd.concat([before_title, before], axis=1)        before_end.insert(1, 'Time', Times[-(before_Times + 2) - i - 1])        ## drop duplicates        before_end = before_end.drop_duplicates()        before_data = pd.concat([before_data, before_end], axis=0)    before_data = before_data.reset_index().drop('index', axis=1)    return before_data